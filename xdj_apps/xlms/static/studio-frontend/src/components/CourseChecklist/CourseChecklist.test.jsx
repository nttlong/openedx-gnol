import { Icon } from '@edx/paragon';
import React from 'react';

import CourseChecklist from '.';
import getFilteredChecklist from '../../utils/CourseChecklist/getFilteredChecklist';
import getValidatedValue from '../../utils/CourseChecklist/getValidatedValue';
import { shallowWithIntl } from '../../utils/i18n/enzymeHelper';

// generating test checklist to avoid relying on actual data
const testChecklistData = ['a', 'b', 'c', 'd'].reduce(((accumulator, currentValue) => { accumulator.push({ id: currentValue, shortDescription: currentValue, longDescription: currentValue }); return accumulator; }), []);

/**
 * generating test validated values to mock the implementation
 * of the getValidatedValue utility function
 */
const validatedValues = {};
let i;

for (i = 0; i < Math.round(testChecklistData.length / 2); i += 1) {
  validatedValues[testChecklistData[i].id] = true;
}

for (i = Math.round(testChecklistData.length / 2); i < testChecklistData.length; i += 1) {
  validatedValues[testChecklistData[i].id] = false;
}

// mock utility functions
jest.mock('../../utils/CourseChecklist/getValidatedValue');
jest.mock('../../utils/CourseChecklist/getFilteredChecklist');

getValidatedValue.mockImplementation(
  (props, id) => (validatedValues[id]),
);

getFilteredChecklist.mockImplementation(
  dataList => (dataList),
);

let wrapper;

const testData = {
  data: {
    is_self_paced: true,
  },
};

const defaultProps = {
  data: testData,
  dataHeading: 'test',
  dataList: testChecklistData,
};

describe('CourseChecklist', () => {
  describe('renders', () => {
    it('a heading using the dataHeading prop', () => {
      wrapper = shallowWithIntl(<CourseChecklist {...defaultProps} />);

      const heading = wrapper.find('h3').at(0);
      expect(heading).toHaveLength(1);

      expect(heading.text()).toEqual(defaultProps.dataHeading);
    });

    it('a heading with correct props', () => {
      wrapper = shallowWithIntl(<CourseChecklist {...defaultProps} />);

      const heading = wrapper.find('h3');
      expect(heading.find('span').prop('id')).toEqual(`${defaultProps.dataHeading}-heading`);
    });

    it('completion count text', () => {
      wrapper = shallowWithIntl(<CourseChecklist {...defaultProps} />);

      const completed = Object.values(validatedValues).filter(value => value).length;
      const total = Object.values(validatedValues).length;

      const completionCount = wrapper.find('#completion-count');
      expect(completionCount).toHaveLength(1);
      expect(completionCount.text()).toEqual(`${completed}/${total} completed`);
    });

    it('a completion count with correct props', () => {
      wrapper = shallowWithIntl(<CourseChecklist {...defaultProps} />);

      const completionCount = wrapper.find('#completion-count');
      expect(completionCount.prop('aria-describedby')).toEqual(`${defaultProps.dataHeading}-heading`);
    });

    describe('checks with', () => {
      it('the correct number of checks', () => {
        wrapper = shallowWithIntl(<CourseChecklist {...defaultProps} />);

        const listItems = wrapper.find('[id^="checklist-item"]');
        expect(listItems).toHaveLength(testChecklistData.length);
      });

      testChecklistData.forEach((check) => {
        describe(`check with id ${check.id}`, () => {
          wrapper = shallowWithIntl(<CourseChecklist {...defaultProps} />);
          const checkItem = wrapper.find(`#checklist-item-${check.id}`);

          it('renders', () => {
            expect(checkItem).toHaveLength(1);
          });

          it('has correct icon', () => {
            const icon = checkItem.find(Icon);

            expect(icon).toHaveLength(1);
            expect(icon.prop('id')).toEqual(`icon-${check.id}`);

            /**
             * className prop for Icon is array containing a single string
             * generated by classNames package
             */
            if (wrapper.state('values')[check.id]) {
              expect(icon.prop('className')[0]).toEqual(expect.stringContaining('fa-check-circle'));
              expect(icon.prop('className')[0]).toEqual(expect.stringContaining('text-success'));
            } else {
              expect(icon.prop('className')[0]).toEqual(expect.stringContaining('fa-circle-thin'));
              expect(icon.prop('className')[0]).toEqual(expect.stringContaining('checklist-icon-incomplete'));
            }
          });

          it('has correct short description', () => {
            expect(checkItem
              .containsMatchingElement(<div>{check.shortDescription}</div>)).toEqual(true);
          });

          it('has correct long description', () => {
            expect(checkItem
              .containsMatchingElement(<div>{check.longDescription}</div>)).toEqual(true);
          });
        });
      });
    });
  });

  describe('behaves', () => {
    const emptyProps = {
      data: {},
      dataHeading: '',
      dataList: [],
    };

    it('has correct intitial state', () => {
      wrapper = shallowWithIntl(<CourseChecklist {...emptyProps} />);

      expect(wrapper.state('headingID')).toEqual('');
      expect(wrapper.state('checks')).toEqual([]);
      expect(wrapper.state('totalChecks')).toEqual(0);
      expect(wrapper.state('values')).toEqual({});
    });

    it('has correct state after componentWillMount', () => {
      wrapper = shallowWithIntl(<CourseChecklist {...defaultProps} />);

      expect(wrapper.state('headingID')).toEqual(`${defaultProps.dataHeading.split(/\s/).join('-')}-heading`);
      expect(wrapper.state('checks')).toEqual(defaultProps.dataList);
      expect(wrapper.state('totalChecks')).toEqual(Object.values(validatedValues).filter(value => value).length);
      expect(wrapper.state('values')).toEqual(validatedValues);
    });

    it('has correct state after componentWillReceiveProps', () => {
      wrapper = shallowWithIntl(<CourseChecklist {...emptyProps} />);

      wrapper.setProps({
        ...defaultProps,
      });

      expect(wrapper.state('headingID')).toEqual('');
      expect(wrapper.state('checks')).toEqual(defaultProps.dataList);
      expect(wrapper.state('totalChecks')).toEqual(Object.values(validatedValues).filter(value => value).length);
      expect(wrapper.state('values')).toEqual(validatedValues);
    });
  });
});
